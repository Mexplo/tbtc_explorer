{"version":3,"sources":["utils.js","Service.js","utils/index.js","components/Chart/Line.js","page/home/latest_redeem.js","page/home/latest_deposit.js","page/home/history_deposit.js","page/home/history_redeem.js","page/home/index.js","page/deposit.js","page/redeem.js","page/detail.js","page/user.js","page/tdt.js","page/liquidity.js","page/dashboard/action_statistic.js","components/Chart/Pie.js","page/dashboard/holder.js","components/Chart/Column.js","page/dashboard/minter.js","page/dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["DepositFactoryJSON","require","TBTCSystemJSON","TBTCTokenJson","TBTCDepositTokenJson","VendingMachineJson","DepositJson","BondedECDSAKeepJson","BondedECDSAKeepFactoryJson","KeepBondingJson","FeeRebateTokenJson","UniswapV2PairJson","ERC20DetailedJson","BPoolJson","CurveTbtcPoolAbi","web3","Web3","contracts","DepositContract","eth","Contract","abi","DepositFactoryContract","TBTCSystemContract","TBTCTokenContract","TBTCDepositTokenContract","VendingMachineContract","BondedECDSAKeepContract","BondedECDSAKeepFactoryContract","KeepBondingContract","FrtContract","UniswapV2PairTbtcWeth","UniswapV2PairTbtcWbtc","SushiswapV2Pair","newErc20Detail","BalancerPoolTbtcWbtc","BalancerPoolTbtcWeth","CurveTbtcPool","UniswapV2PairWethUSDT","stateDesc","0","1","2","3","4","5","6","7","8","9","10","11","apolloClient","ApolloClient","uri","cache","InMemoryCache","tbtcGraphClient","tokenIdToAddress","tokenId","address","utils","toHex","length","concat","slice","addressToTokenId","addr","BN","toString","getStateDesc","stateId","mintStatusForList","state","indexOf","mintStatus","isFunded","redeemStatus","isStarted","isRedeemed","time","blockToTimestamp","block","calMintStep","mintLogs","FundedEvent","RegisteredPubKeyEvent","CreatedEvent","calRedeemStep","redeemLogs","RedeemedEvent","GotRedemptionSignatureEvent","RedemptionRequestedEvent","lotSize","common","getDepositEvent","params","a","Utils","getPastEvents","error","result","console","log","getTdtTransferEvent","getTbtcTransferEvent","getRedemptionRequestedEvent","getPublicKeyPublished","contract","options","getRegisteredPubkeyEvent","getFundedEvent","getGotRedemptionSignatureEvent","getRedeemedEvent","getReservesOfPair","methods","token0","call","reserve0Addr","token1","reserve1Addr","reserve0Contract","symbol","reserve0Symbol","decimals","reserve0Decimals","reserve1Contract","reserve1Symbol","reserve1Decimals","getReserves","reserves","reserve0","_reserve0","reserve1","_reserve1","getReservesOfBPool","getCurrentTokens","tokens","i","tokenContract","getBalance","balance","push","deposit","all","fromBlock","getByWallet","wallet","depositAddrList","filter","from","to","map","tdtMintEvent","returnValues","_depositContractAddress","getState","addrList","Promise","depositContract","currentState","getLotSizeTbtc","lotSizeTbtc","getCreator","event","depositAddr","ownerOf","getCollateralizationPercentage","collateralizationPercentage","getHistory","getBlockNumber","toBlock","depositEventList","data","key","Math","floor","blockNumber","blockTimestamp","getBlock","blockInfo","timestamp","Object","keys","count","redeem","_requester","requestEventList","item","created","registeredPubkey","funded","request","signature","redeemed","tbtc","balanceOf","maxSupply","getMaxSupply","currentSupply","totalSupply","totalMinted","events","BigNumber","plus","value","toFixed","mintUserCount","_address","userAddr","tdt","frt","keep","baseInfo","keepAddress","status","isActive","isClosed","application","honestThreshold","members","owner","publicKey","bondList","keepAddr","holder","governance","getCollateralizationThresholds","getInitialCollateralizedPercent","initial","getUndercollateralizedThresholdPercent","undercollaterized","getSeverelyUndercollateralizedThresholdPercent","severelyUndercollateralized","tx","getByHash","txHash","getTransaction","sushi","uniswap","getReservesOfTbtcWeth","getReservesOfTbtcWbtc","getReservesOfWethUSDT","balancer","curve","coins","tokenAddr","balances","addressFormatter","useEtherScan","addressStart","substring","addressEnd","hashLink","addressWord","href","target","txFormatter","LineChart","renderChart","chart","Chart","container","uuid","autoFit","height","scale","nice","min","formatter","t","moment","format","tooltip","showCrosshairs","shared","interval","position","color","render","this","props","className","id","React","Component","REDEMPTION_QUERY","gql","LatestRedeem","useQuery","loading","redeems","deposits","size","pagination","rowKey","transactionIndex","rowClassName","record","index","columns","title","redemptionStartedAt","fromNow","tdtToken","contractAddress","align","lotSizeSatoshis","dataSource","DEPOSITS_QUERY","LatestDeposit","createdAt","fetchDeposits","startAt","stopAt","history","resolve","reject","query","variables","then","res","catch","e","now","promises","unix","add","setState","loadingComponent","LoadingOutlined","style","fontSize","HistoryRedeem","Search","Input","Home","handleSearch","isAddress","window","location","message","totalMintedUserCount","depositHistory","redeemHistory","getTbtcData","bind","Service","placeholder","onSearch","enterButton","type","span","prefix","ArrowUpOutlined","precision","justify","lg","xs","Select","Option","Deposit","getDataWithManager","page","pageSize","getData","skip","first","onChange","newPage","newPageSize","bordered","sorter","b","pageSizeOptions","RedemptionList","LOG_QUERY","Step","Steps","Detail","fetchDeposit","contractAddr","match","fetchLogs","depositId","__typename","mintState","redeemState","current","direction","subTitle","description","submitter","transactionHash","minHeight","Item","label","endOfTerm","minter","bondedECDSAKeep","member","marginRight","totalBondAmount","initialCollateralizedPercent","undercollateralizedThresholdPercent","severelyUndercollateralizedThresholdPercent","User","getTbtcBalance","tbtcBalance","getTdtBalance","tdtBalance","getFrtBalance","frtBalance","getDepositList","depositList","reverse","getMintLotSize","getRedeemList","redeemList","getRedeemLotSize","mintLotSize","redeemLotSize","AvailableTokenIdList","LiquidityPool","getUniWethUSDT","uniWethUSDT","getSushiTbtcWbtc","sushiTbtcWbtc","getUniTbtcWeth","uniTbtcWeth","getUniTbtcWbtc","uniTbtcWbtc","getBalancerTbtcWbtc","balancerTbtcWbtc","getBalancerTbtcWeth","balancerTbtcWeth","getCurveBalance","curveReserve","numberToFixed","n","parseFloat","tbtcPrice","ethPrice","tbtcSupplay","formatDollar","dollar","numeral","src","token","pow","PieChart","chartData","splice","coordinate","radius","innerRadius","showTitle","showMarkers","annotation","text","content","fill","textAlign","offsetY","layout","labelHeight","obj","labelLine","lineWidth","adjust","interaction","HOLDER_QUERY","Holder","client","holders","tokenHolders","tokenBalanceRaw","ColumnChart","minted","MINT_QUERY","Minter","mints","minters","totalAmount","minter_addrs","mint","amount","sort","comparedTo","Dashboard","config","duration","maxCount","App","route","visible","placement","exact","path","component","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2523f86c.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst DepositFactoryJSON = require(\"@keep-network/tbtc/artifacts/DepositFactory.json\");\nconst TBTCSystemJSON = require(\"@keep-network/tbtc/artifacts/TBTCSystem.json\");\nconst TBTCTokenJson = require(\"@keep-network/tbtc/artifacts/TBTCToken.json\");\nconst TBTCDepositTokenJson = require(\"@keep-network/tbtc/artifacts/TBTCDepositToken.json\");\nconst VendingMachineJson = require(\"@keep-network/tbtc/artifacts/VendingMachine.json\");\nconst DepositJson = require(\"@keep-network/tbtc/artifacts/Deposit.json\");\nconst BondedECDSAKeepJson = require(\"@keep-network/keep-ecdsa/artifacts/BondedECDSAKeep.json\");\nconst BondedECDSAKeepFactoryJson = require(\"@keep-network/keep-ecdsa/artifacts/BondedECDSAKeepFactory.json\");\nconst KeepBondingJson = require(\"@keep-network/keep-ecdsa/artifacts/KeepBonding.json\");\nconst FeeRebateTokenJson = require(\"@keep-network/tbtc/artifacts/FeeRebateToken.json\");\nconst UniswapV2PairJson = require('@uniswap/v2-core/build/UniswapV2Pair');\nconst ERC20DetailedJson = require('@openzeppelin/contracts/build/contracts/ERC20Detailed.json');\nconst BPoolJson = require('./abi/BPool.json');\nconst CurveTbtcPoolAbi = require('./abi/CurveTbtcPool.json');\n\nconst web3 = new Web3(\"https://mainnet.infura.io/v3/fae6a8d70b074a21898e735c568a80cf\");\nconst contracts = {\n  DepositContract: new web3.eth.Contract(DepositJson.abi),\n  DepositFactoryContract: new web3.eth.Contract(DepositFactoryJSON.abi, \"0x87effef56c7ff13e2463b5d4dce81be2340faf8b\"),\n  TBTCSystemContract: new web3.eth.Contract(TBTCSystemJSON.abi, \"0xe20A5C79b39bC8C363f0f49ADcFa82C2a01ab64a\"),\n  TBTCTokenContract: new web3.eth.Contract(TBTCTokenJson.abi, \"0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa\"),\n  TBTCDepositTokenContract: new web3.eth.Contract(TBTCDepositTokenJson.abi, \"0x10B66Bd1e3b5a936B7f8Dbc5976004311037Cdf0\"),\n  VendingMachineContract: new web3.eth.Contract(VendingMachineJson.abi, \"0x526c08e5532a9308b3fb33b7968ef78a5005d2ac\"),\n  BondedECDSAKeepContract: new web3.eth.Contract(BondedECDSAKeepJson.abi),\n  BondedECDSAKeepFactoryContract: new web3.eth.Contract(BondedECDSAKeepFactoryJson.abi, \"0xA7d9E842EFB252389d613dA88EDa3731512e40bD\"),\n  KeepBondingContract: new web3.eth.Contract(KeepBondingJson.abi, \"0x27321f84704a599aB740281E285cc4463d89A3D5\"),\n  FrtContract: new web3.eth.Contract(FeeRebateTokenJson.abi, \"0xaf3fff06b75f99352d8c2a3c4bef1339a2f94789\"),\n  UniswapV2PairTbtcWeth: new web3.eth.Contract(UniswapV2PairJson.abi, \"0x854056Fd40C1B52037166285B2e54Fee774d33f6\"),\n  UniswapV2PairTbtcWbtc: new web3.eth.Contract(UniswapV2PairJson.abi, \"0x8a1643D77621d171df97Df4fc86051F54F7EBA90\"),\n  SushiswapV2Pair: new web3.eth.Contract(UniswapV2PairJson.abi, \"0x2dbc7dd86c6cd87b525bd54ea73ebeebbc307f68\"),\n  newErc20Detail: () => new web3.eth.Contract(ERC20DetailedJson.abi),\n  BalancerPoolTbtcWbtc: new web3.eth.Contract(BPoolJson.abi, \"0x17996cbddd23c2a912de8477c37d43a1b79770b8\"),\n  BalancerPoolTbtcWeth: new web3.eth.Contract(BPoolJson.abi, \"0xb98db2fb641751462fd78c6db2a5c6edb50864d4\"),\n  CurveTbtcPool: new web3.eth.Contract(CurveTbtcPoolAbi, \"0xC25099792E9349C7DD09759744ea681C7de2cb66\"),\n\n  UniswapV2PairWethUSDT: new web3.eth.Contract(UniswapV2PairJson.abi, \"0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852\"),\n}\n\nconst stateDesc = {\n  // DOES NOT EXIST YET\n  0: 'START',\n  // FUNDING FLOW\n  1: 'AWAITING_SIGNER_SETUP',\n  2: 'AWAITING_BTC_FUNDING_PROOF',\n  // FAILED SETUP\n  3: 'FAILED_SETUP',\n  // ACTIVE\n  4: 'ACTIVE',  // includes courtesy call\n  // REDEMPTION FLOW\n  5: 'AWAITING_WITHDRAWAL_SIGNATURE',\n  6: 'AWAITING_WITHDRAWAL_PROOF',\n  7: 'REDEEMED',\n  // SIGNER LIQUIDATION FLOW\n  8: 'COURTESY_CALL',\n  9: 'FRAUD_LIQUIDATION_IN_PROGRESS',\n  10: 'LIQUIDATION_IN_PROGRESS',\n  11: 'LIQUIDATE',\n}\n\nexport default {\n  apolloClient: new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/name/miracle2k/all-the-keeps',\n    cache: new InMemoryCache(),\n  }),\n  tbtcGraphClient: new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/name/suntzu93/tbtc',\n    cache: new InMemoryCache(),\n  }),\n  web3,\n  contracts,\n  tokenIdToAddress: tokenId => {\n    let address = web3.utils.toHex(tokenId)\n    if(address.length == 41) {\n      address = '0x0'.concat(address.slice(2));\n    }\n\n    return address;\n  },\n  addressToTokenId: addr => new web3.utils.BN(addr).toString(),\n  getStateDesc: stateId => stateDesc[stateId],\n  mintStatusForList: (state) => {\n    if(['4', '5', '6', '7'].indexOf(state) != -1) {\n      return 'COMPLETED'\n    }\n    return stateDesc[state];\n  },\n  mintStatus: (state, isFunded) => {\n    if(isFunded) {\n      return 'COMPLETED';\n    }\n    if(state == 3) {\n      return 'FAILED';\n    }\n    if([9, 10, 11].indexOf(state) != -1) {\n      return 'LIQUIDATE';\n    }\n    return 'PROCESSING';\n  },\n  redeemStatus: (state, isStarted, isRedeemed) => {\n    if(!isStarted) {\n      return 'NOT_START';\n    }\n    if(isRedeemed) {\n      return 'COMPLETED';\n    }\n    if(isStarted && [9, 10, 11].indexOf(state) != -1) {\n      return 'LIQUIDATE';\n    }\n    return 'PROCESSING';\n  },\n  time: {\n    blockToTimestamp: block => {\n      let startTimestamp = 1601470793;\n      let startBlock = 10963898;\n      return startTimestamp + (block - startBlock) * 13.7;\n    }\n  },\n  calMintStep: mintLogs => {\n    if(!!mintLogs.FundedEvent) {\n      return 2;\n    }\n    if(!!mintLogs.RegisteredPubKeyEvent) {\n      return 1;\n    }\n    if(!!mintLogs.CreatedEvent) {\n      return 0;\n    }\n    return -1;\n  },\n  calRedeemStep: redeemLogs => {\n    if(!!redeemLogs.RedeemedEvent) {\n      return 2;\n    }\n    if(!!redeemLogs.GotRedemptionSignatureEvent) {\n      return 1;\n    }\n    if(!!redeemLogs.RedemptionRequestedEvent) {\n      return 0;\n    }\n    return -1;\n  },\n}\n","import BigNumber from 'bignumber.js';\nimport Utils from './utils';\n\nlet fromBlock = 0;\nlet cache = {\n  state: {},\n  lotSize: {},\n};\n\nlet common = {\n  getDepositEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"Created\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get Created event of TBTCSystem.\");\n    })\n  },\n  getTdtTransferEvent: async params => {\n    return await Utils.contracts.TBTCDepositTokenContract.getPastEvents(\"Transfer\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get MintTdt event of TdtToken.\");\n    })\n  },\n  getTbtcTransferEvent: async params => {\n    return await Utils.contracts.TBTCTokenContract.getPastEvents(\"Transfer\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get MintTbtc event of TbtcToken.\");\n    })\n  },\n  getRedemptionRequestedEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"RedemptionRequested\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get RedemptionRequested event of TBTCSystem.\");\n    })\n  },\n  getPublicKeyPublished: async (addr, params) => {\n    let contract = Utils.contracts.BondedECDSAKeepContract;\n    contract.options.address = addr;\n    return await contract.getPastEvents(\"PublicKeyPublished\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get PublicKeyPublished event of Keep.\");\n    })\n  },\n  getRegisteredPubkeyEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"RegisteredPubkey\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get RegisteredPubkey event of TBTCSystem.\");\n    })\n  },\n  getFundedEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"Funded\", params, (error, result) => {\n      if (error) console.log(\"Couldn't get Funded event of TBTCSystem.\");\n    })\n  },\n  getGotRedemptionSignatureEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"GotRedemptionSignature\", params, (error, result) => {\n        if (error) console.log(\"Couldn't get GotRedemptionSignature event of TBTCSystem.\");\n    });\n  },\n  getRedeemedEvent: async params => {\n    return await Utils.contracts.TBTCSystemContract.getPastEvents(\"Redeemed\", params, (error, result) => {\n        if (error) console.log(\"Couldn't get Redeemed event of TBTCSystem.\");\n    });\n  },\n  getReservesOfPair: async contract => {\n    let reserve0Addr = await contract.methods.token0().call();\n    let reserve1Addr = await contract.methods.token1().call();\n\n    let reserve0Contract = Utils.contracts.newErc20Detail();\n    reserve0Contract.options.address = reserve0Addr;\n    let reserve0Symbol = await reserve0Contract.methods.symbol().call();\n    let reserve0Decimals = await reserve0Contract.methods.decimals().call();\n\n    let reserve1Contract = Utils.contracts.newErc20Detail();\n    reserve1Contract.options.address = reserve1Addr;\n    let reserve1Symbol = await reserve1Contract.methods.symbol().call();\n    let reserve1Decimals = await reserve1Contract.methods.decimals().call();\n\n    let reserves = await contract.methods.getReserves().call();\n    return {\n      reserve0: reserves._reserve0,\n      reserve0Symbol,\n      reserve0Decimals,\n      reserve1: reserves._reserve1,\n      reserve1Symbol,\n      reserve1Decimals,\n    }\n  },\n\n  getReservesOfBPool: async contract => {\n    let result = [];\n\n    let tokens = await contract.methods.getCurrentTokens().call();\n    for(let i=0; i < tokens.length; i++) {\n      let tokenContract = Utils.contracts.newErc20Detail();\n      tokenContract.options.address = tokens[i];\n      result.push({\n        symbol: await tokenContract.methods.symbol().call(),\n        decimals: await tokenContract.methods.decimals().call(),\n        balance: await contract.methods.getBalance(tokens[i]).call(),\n      });\n    }\n\n    return result;\n  }\n}\n\nexport default {\n  deposit: {\n    all: async fromBlock => {\n      return await common.getDepositEvent({ fromBlock });\n    },\n\n    getByWallet: async wallet => {\n      let depositAddrList = [];\n      let tdtMintEventList = await common.getTdtTransferEvent({\n        fromBlock,\n        filter: { from: '0x0000000000000000000000000000000000000000', to: wallet }\n      });\n      tdtMintEventList.map(tdtMintEvent => {\n        let addr = Utils.tokenIdToAddress(tdtMintEvent.returnValues.tokenId);\n        depositAddrList.push(addr);\n      });\n\n      if(depositAddrList.length == 0) {\n        return [];\n      }\n      return await common.getDepositEvent({\n        fromBlock,\n        filter: { _depositContractAddress: depositAddrList }\n      });\n    },\n\n    getState: async addrList => {\n      let result = {};\n      await Promise.all(addrList.map(async addr => {\n        let depositContract = Utils.contracts.DepositContract;\n        depositContract.options.address = addr;\n        let state = cache.state[addr] = !!cache.state[addr] ?\n          cache.state[addr] :\n          await depositContract.methods.currentState().call()\n        ;\n\n        result[addr] = { state, stateDesc: Utils.getStateDesc(state) };\n      }));\n\n      return result;\n    },\n\n    getLotSizeTbtc: async addrList => {\n      let result = {};\n      await Promise.all(addrList.map(async addr => {\n        let depositContract = Utils.contracts.DepositContract;\n        depositContract.options.address = addr;\n        result[addr] = cache.lotSize[addr] = !!cache.lotSize[addr] ?\n          cache.lotSize[addr] :\n          await depositContract.methods.lotSizeTbtc().call()\n        ;\n      }));\n\n      return result;\n    },\n\n    getCreator: async () => {\n      let result = {};\n      let events = await common.getTdtTransferEvent({\n        fromBlock,\n        filter: { from: '0x0000000000000000000000000000000000000000' }\n      });\n      events.map(event => {\n        let depositAddr = Utils.tokenIdToAddress(event.returnValues.tokenId);\n        result[depositAddr] = event.returnValues.to;\n      })\n\n      return result;\n    },\n\n    ownerOf: async addr => await Utils.contracts.TBTCDepositTokenContract.methods.ownerOf(addr).call(),\n\n    getCollateralizationPercentage: async addr => {\n      let depositContract = Utils.contracts.DepositContract;\n      depositContract.options.address = addr;\n\n      return await depositContract.methods.collateralizationPercentage().call();\n    },\n\n    getHistory: async () => {\n      let toBlock = await Utils.web3.eth.getBlockNumber();\n      let fromBlock = toBlock - 5000 * 7;\n      let depositEventList = await common.getDepositEvent({ fromBlock, toBlock });\n\n      let data = {};\n      depositEventList.map(event => {\n        let key = Math.floor((toBlock - event.blockNumber) / 5000);\n        data[key] = !data[key] ? 1 : data[key] + 1;\n      });\n\n      let blockTimestamp = {};\n      await Promise.all([0, 1, 2, 3, 4, 5, 6].map(async key => {\n        let blockNumber = toBlock - key * 5000;\n        let blockInfo = await Utils.web3.eth.getBlock(blockNumber);\n        blockTimestamp[key] = blockInfo.timestamp;\n      }));\n\n      let result = [];\n      Object.keys(data).map(key => {\n        result.push({ key, count: data[key], timestamp: blockTimestamp[key] });\n      });\n\n      return result;\n    },\n\n  },\n\n  redeem: {\n    all: async fromBlock => {\n      return await common.getRedemptionRequestedEvent({ fromBlock });\n    },\n\n    getByWallet: async wallet => {\n      return await common.getRedemptionRequestedEvent({ fromBlock, filter: { _requester: wallet } });\n    },\n\n    getHistory: async () => {\n      let toBlock = await Utils.web3.eth.getBlockNumber();\n      let fromBlock = toBlock - 5000 * 7;\n      let requestEventList = await common.getRedemptionRequestedEvent({ fromBlock, toBlock });\n\n      let data = {};\n      requestEventList.map(event => {\n        let key = Math.floor((toBlock - event.blockNumber) / 5000);\n        data[key] = !data[key] ? 1 : data[key] + 1;\n      });\n\n      let blockTimestamp = {};\n      await Promise.all([0, 1, 2, 3, 4, 5, 6].map(async key => {\n        let blockNumber = toBlock - key * 5000;\n        let blockInfo = await Utils.web3.eth.getBlock(blockNumber);\n        blockTimestamp[key] = blockInfo.timestamp;\n      }));\n\n      let result = [];\n      Object.keys(data).map(key => {\n        result.push({ key, count: data[key], timestamp: blockTimestamp[key] });\n      });\n\n      return result;\n    },\n  },\n\n  // deposit or redeem detail\n  item: {\n    mintLogs: async addr => {\n      let result = {};\n\n      await Promise.all([\n        // 1. ceated\n        (async () => {\n          let created = await common.getDepositEvent({ fromBlock, filter: { _depositContractAddress: addr } });\n          result.created = created.length > 0 ? created[0] : null;\n        })(),\n        // 2. registeredPubkey\n        (async () => {\n          let registeredPubkey = await common.getDepositEvent({ fromBlock, filter: { _depositContractAddress: addr } });\n          result.registeredPubkey = registeredPubkey.length > 0 ? registeredPubkey[0] : null;\n        })(),\n        // 3. funded\n        (async () => {\n          let funded = await common.getFundedEvent({ fromBlock, filter: { _depositContractAddress: addr } });\n          result.funded = funded.length > 0 ? funded[0] : null;\n        })(),\n        // 4. TODO: switch TDT to TBTC\n      ]);\n\n      return result;\n    },\n    redeemLogs: async addr => {\n      let result = {};\n      await Promise.all([\n        // 1. RedemptionRequested\n        (async () => {\n          let request = await common.getRedemptionRequestedEvent({ fromBlock, filter: { _depositContractAddress: addr } })\n          result.request = request.length > 0 ? request[0] : null;\n        })(),\n        // 2. GotRedemptionSignature\n        (async () => {\n          let signature = await common.getGotRedemptionSignatureEvent({ fromBlock, filter: { _depositContractAddress: addr } })\n          result.signature = signature.length > 0 ? signature[0] : null;\n        })(),\n        // 3. Redeemed\n        (async () => {\n          let redeemed = await common.getRedeemedEvent({ fromBlock, filter: { _depositContractAddress: addr } });\n          result.redeemed = redeemed.length > 0 ? redeemed[0] : null;\n        })(),\n      ])\n\n      return result\n    }\n  },\n\n  tbtc: {\n    balance: async addr => await Utils.contracts.TBTCTokenContract.methods.balanceOf(addr).call(),\n    maxSupply: async () => await Utils.contracts.VendingMachineContract.methods.getMaxSupply().call(),\n    currentSupply: async () => await Utils.contracts.TBTCTokenContract.methods.totalSupply().call(),\n    totalMinted: async () => {\n      let events = await common.getTbtcTransferEvent({ fromBlock, filter: { from: '0x0000000000000000000000000000000000000000' } });\n      let result = new BigNumber(0);\n      events.map(event => {\n        result = result.plus(event.returnValues.value)\n      });\n\n      return result.toFixed();\n    },\n    mintUserCount: async () => {\n      let events = await common.getTdtTransferEvent({ fromBlock, filter: { to: Utils.contracts.VendingMachineContract._address } });\n      let result = 0, filter = {};\n      events.map(event => {\n        let userAddr = event.returnValues.from;\n        if(!!filter[userAddr]) return;\n        filter[userAddr] = true;\n        result++;\n      });\n\n      return result;\n    },\n  },\n\n  tdt: {\n    balance: async addr => {\n      return await Utils.contracts.TBTCDepositTokenContract.methods.balanceOf(addr).call();\n    }\n  },\n\n  frt: {\n    balance: async addr => {\n      return await Utils.contracts.FrtContract.methods.balanceOf(addr).call();\n    }\n  },\n\n  keep: {\n    baseInfo: async addr => {\n      let events = await Utils.contracts.BondedECDSAKeepFactoryContract.getPastEvents(\"BondedECDSAKeepCreated\", {\n        fromBlock,\n        filter: { keepAddress: addr }\n      }, (error, result) => {\n          if (error) console.log(\"Couldn't get Redeemed event of TBTCSystem.\");\n      });\n      if(!events || events.length.length == 0) {\n        return null;\n      }\n\n      // get status\n      let contract = Utils.contracts.BondedECDSAKeepContract;\n      contract.options.address = addr;\n      let status = 'terminated';\n      if(await contract.methods.isActive()) {\n        status = 'active';\n      } else if (await contract.methods.isClosed()) {\n        status = 'closed';\n      }\n\n      let { application, honestThreshold, keepAddress, members, owner } = events[0].returnValues;\n\n      return {\n        application,\n        honestThreshold,\n        keepAddress,\n        members,\n        owner,\n        status,\n        publicKey: await contract.methods.publicKey().call(),\n      }\n    },\n    bondList: async keepAddr => {\n      return await Utils.contracts.KeepBondingContract.getPastEvents(\"BondCreated\", {\n        fromBlock,\n        filter: { holder: keepAddr }\n      }, (error, result) => {\n          if (error) console.log(\"Couldn't get Redeemed event of TBTCSystem.\");\n      });\n    },\n  },\n\n  governance: {\n    getCollateralizationThresholds: async () => {\n      let contract = Utils.contracts.TBTCSystemContract;\n      let result = {};\n      await Promise.all([\n        (async () => {\n          result.initial = await contract.methods.getInitialCollateralizedPercent().call();\n        })(),\n        (async () => {\n          result.undercollaterized = await contract.methods.getUndercollateralizedThresholdPercent().call();\n        })(),\n        (async () => {\n          result.severelyUndercollateralized = await contract.methods.getSeverelyUndercollateralizedThresholdPercent().call();\n        })(),\n      ]);\n\n      return result;\n    }\n  },\n\n  tx: {\n    getByHash: async txHash => {\n      return await Utils.web3.eth.getTransaction(txHash);\n    }\n  },\n\n  sushi: {\n    getReserves: async () => {\n      return common.getReservesOfPair(Utils.contracts.SushiswapV2Pair);\n    }\n  },\n\n  uniswap: {\n    getReservesOfTbtcWeth: async () => {\n      return common.getReservesOfPair(Utils.contracts.UniswapV2PairTbtcWeth);\n    },\n    getReservesOfTbtcWbtc: async () => {\n      return common.getReservesOfPair(Utils.contracts.UniswapV2PairTbtcWbtc);\n    },\n    getReservesOfWethUSDT: async () => {\n      return common.getReservesOfPair(Utils.contracts.UniswapV2PairWethUSDT);\n    }\n  },\n\n  balancer: {\n    getReservesOfTbtcWbtc: async () => {\n      return common.getReservesOfBPool(Utils.contracts.BalancerPoolTbtcWbtc);\n    },\n    getReservesOfTbtcWeth: async () => {\n      return common.getReservesOfBPool(Utils.contracts.BalancerPoolTbtcWeth);\n    }\n  },\n\n  curve: {\n    getReserves: async () => {\n      let result = [];\n      let contract = Utils.contracts.CurveTbtcPool;\n\n      for(let i=0; i < 2; i++) {\n        let tokenAddr = await contract.methods.coins(`0x${i}`).call();\n        let tokenContract = Utils.contracts.newErc20Detail();\n        tokenContract.options.address = tokenAddr;\n        result.push({\n          symbol: await tokenContract.methods.symbol().call(),\n          decimals: await tokenContract.methods.decimals().call(),\n          balance: await contract.methods.balances(`0x${i}`).call(),\n        });\n      }\n\n      return result;\n    }\n  }\n}\n","import React from 'react';\n\nexport function addressFormatter(address, useEtherScan = true) {\n  if (address && address.length) {\n    let addressStart = address.substring(0, 7);\n    let addressEnd = address.substring(address.length - 4);\n    let hashLink = 'https://etherscan.io/address/' + address;\n    let addressWord = addressStart + '...' + addressEnd;\n\n    if (!useEtherScan) {\n      return addressWord;\n    }\n    return <a href={hashLink} target=\"_blank\">{ addressWord }</a>;\n  }\n  return '';\n}\n\nexport function txFormatter(address) {\n  if (address && address.length) {\n    let addressStart = address.substring(0, 7);\n    let addressEnd = address.substring(address.length - 4);\n    let hashLink = 'https://etherscan.io/tx/' + address;\n    let addressWord = addressStart + '...' + addressEnd;\n\n    return <a href={hashLink} target=\"_blank\">{ addressWord }</a>;\n  }\n  return '';\n}\n","import React from 'react';\nimport uuid from 'uuid/v4';\nimport { Chart } from '@antv/g2';\nimport moment from 'moment';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nexport default class LineChart extends React.Component {\n  componentWillMount() {\n    this.uuid = uuid();\n  }\n\n  renderChart = data => {\n    if (!data.length) {\n      return;\n    }\n    const chart = new Chart({\n      container: this.uuid,\n      autoFit: true,\n      height: 170,\n    });\n\n    chart.data(data);\n    chart.scale({\n      count: {\n        nice: true,\n        min: 0,\n      },\n      timestamp: {\n        nice: true,\n        formatter(t) {\n          return moment(t * 1000).format('MM-DD');\n        }\n      },\n    });\n    chart.tooltip({\n      showCrosshairs: true,\n      shared: true,\n    });\n\n    chart.interval().position('timestamp*count').color('#6178EF');\n    // chart.line().color('#6178EF').position('timestamp*count').shape('smooth');\n    // chart.point().color('#1790FF').position('timestamp*count');\n\n    chart.render();\n  }\n\n  componentDidMount() {\n    this.renderChart(this.props.data);\n  }\n\n  render() {\n    return <div className=\"chart\" id={this.uuid}></div>;\n  }\n}\n","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\n\nconst REDEMPTION_QUERY = gql`\n  {\n    deposits(\n      orderBy: redemptionStartedAt,\n      orderDirection: desc,\n      first: 10,\n      where: { redemptionStartedAt_not: null }\n    ) {\n      id,\n      contractAddress,\n      lotSizeSatoshis,\n      currentState,\n      keepAddress,\n      updatedAt,\n      createdAt,\n      redemptionStartedAt,\n      currentStateTimesOutAt\n      tdtToken {\n        owner\n      }\n    }\n  }\n`;\n\nexport default function LatestRedeem() {\n  const { loading, error, data } = useQuery(REDEMPTION_QUERY);\n\n  if (error) return <p>Error :(</p>;\n  let redeems = data && data.deposits || [];\n  console.log('redeems', redeems)\n\n  return <div>\n    <h1>Latest Redeem</h1>\n    <Table\n      size=\"small\"\n      loading={loading}\n      pagination={false}\n      rowKey={item => item.transactionIndex}\n      rowClassName={(record, index) => {\n        return index % 2 === 0 ? 'row__white' : 'row__ccc';\n      }}\n      columns={[\n        {\n          title: '#',\n          render() {\n            return <span className=\"icon__deposit\">R</span>;\n          }\n        },\n        {\n          title: 'Time',\n          render(item) {\n            return moment(+item.redemptionStartedAt * 1000).fromNow();\n          }\n        },\n        {\n          title: 'User',\n          render(item) {\n            return <Link to={`/user/${item.tdtToken.owner}`}>\n              { addressFormatter(item.tdtToken.owner, false) }\n            </Link>\n          }\n        },\n        {\n          title: 'Contract address',\n          render(item) {\n            return <Link to={`/detail/${item.contractAddress}`}>\n              { addressFormatter(item.contractAddress, false) }\n            </Link>;\n          }\n        },\n        {\n          title: 'Lot Size',\n          align: 'right',\n          render(item) {\n            return <div className=\"lotSize\">{ item.lotSizeSatoshis / 1e8 } <i>BTC</i></div>\n          }\n        },\n      ]}\n      dataSource={redeems}\n    />\n\n    <Link to=\"/redeem\">\n      <Button\n        block\n        className=\"list__btn\"\n      >\n        View all Redeem\n      </Button>\n    </Link>\n  </div>;\n}","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\n\nconst DEPOSITS_QUERY = gql`\n  {\n    deposits(\n      orderBy: createdAt,\n      orderDirection: desc,\n      first: 10\n    ) {\n      id,\n      contractAddress,\n      lotSizeSatoshis,\n      currentState,\n      keepAddress,\n      updatedAt,\n      createdAt,\n      redemptionStartedAt,\n      currentStateTimesOutAt\n      tdtToken {\n        owner\n      }\n    }\n  }\n`;\n\nexport default function LatestDeposit() {\n  const { loading, error, data } = useQuery(DEPOSITS_QUERY);\n  if (error) return <p>Error :(</p>;\n\n  let deposits = data && data.deposits || [];\n\n  return <div>\n    <h1>Latest Deposit</h1>\n    <Table\n      size=\"small\"\n      pagination={false}\n      loading={loading}\n      rowKey={item => item.transactionIndex}\n      rowClassName={(record, index) => {\n        return index % 2 === 0 ? 'row__white' : 'row__ccc';\n      }}\n      columns={[\n        {\n          title: '#',\n          render() {\n            return <span className=\"icon__deposit\">D</span>;\n          }\n        },\n        {\n          title: 'Time',\n          render(item) {\n            return moment(+item.createdAt * 1000).fromNow();\n          }\n        },\n        {\n          title: 'User',\n          render(item) {\n            return (\n              <Link to={`/user/${item.tdtToken.owner}`}>\n                { addressFormatter(item.tdtToken.owner, false) }\n              </Link>\n            )\n          }\n        },\n        {\n          title: 'Contract Address',\n          render(item) {\n            return <Link to={`/detail/${item.contractAddress}`}>\n              { addressFormatter(item.contractAddress, false) }\n            </Link>;\n          }\n        },\n        {\n          title: 'Lot Size',\n          align: 'right',\n          render(item) {\n            return <div className=\"lotSize\">{ item.lotSizeSatoshis / 1e8 } <i>BTC</i></div>;\n          }\n        },\n      ]}\n      dataSource={deposits}\n    />\n      \n    <Link to=\"/deposit\">\n      <Button\n        block\n        className=\"list__btn\"\n      >\n        View all Deposits\n      </Button>\n    </Link>\n  </div>;\n}","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport LineChart from '../../components/Chart/Line';\nimport Utils from '../../utils';\n\nconst DEPOSITS_QUERY = gql`\n  query Deposit($startAt: Int!, $stopAt: Int!) {\n    deposits(\n      orderBy: createdAt,\n      orderDirection: desc,\n      first: 500,\n      where: { createdAt_gt: $startAt, createdAt_lt: $stopAt }\n    ) {\n      id,\n      createdAt\n    }\n  }\n`;\n\nfunction fetchDeposits(startAt, stopAt, history) {\n  return new Promise((resolve, reject) => {\n    Utils.apolloClient.query({\n      query: DEPOSITS_QUERY,\n      variables: { startAt, stopAt }\n    })\n    .then(res => {\n      if(res.loading) return;\n      let deposits = res.data && res.data.deposits || [];\n      history.push({ timestamp: stopAt, count: deposits.length });\n      resolve();\n    })\n    .catch(e => reject(e));\n  });\n}\n\nexport default class LatestDeposit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: []\n    }\n  }\n\n  async componentDidMount() {\n    let now = moment();\n    let history = [];\n    let promises = [];\n    [0, 1, 2, 3, 4, 5, 6].map(() => {\n      let stopAt = now.unix();\n      let startAt = now.add(-1, 'days').unix();\n      promises.push(fetchDeposits(startAt, stopAt, history));\n    });\n    await Promise.all(promises).catch(console.error);;\n\n    this.setState({ history });\n  }\n\n  render() {\n    let { history } = this.state;\n    let loadingComponent = <div className=\"chart\"><LoadingOutlined style={{fontSize: '28px', color: '#ccc'}} /></div>;\n    return (\n      <div>\n        <h1>Deposit History</h1>\n        {\n          history.length ? <LineChart data={history} /> : loadingComponent\n        }\n      </div>\n    );\n  }\n}","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport LineChart from '../../components/Chart/Line';\nimport Utils from '../../utils';\n\nconst DEPOSITS_QUERY = gql`\n  query Deposit($startAt: Int!, $stopAt: Int!) {\n    deposits(\n      orderBy: createdAt,\n      orderDirection: desc,\n      first: 500,\n      where: { redemptionStartedAt_gt: $startAt, redemptionStartedAt_lt: $stopAt, redemptionStartedAt_not: null }\n    ) {\n      id,\n      redemptionStartedAt\n    }\n  }\n`;\n\nfunction fetchDeposits(startAt, stopAt, history) {\n  return new Promise((resolve, reject) => {\n    Utils.apolloClient.query({\n      query: DEPOSITS_QUERY,\n      variables: { startAt, stopAt }\n    })\n    .then(res => {\n      if(res.loading) return;\n      let deposits = res.data && res.data.deposits || [];\n      history.push({ timestamp: stopAt, count: deposits.length });\n      resolve();\n    })\n    .catch(e => reject(e));;\n  });\n}\n\nexport default class HistoryRedeem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: []\n    }\n  }\n\n  async componentDidMount() {\n    let now = moment();\n    let history = [];\n    let promises = [];\n    [0, 1, 2, 3, 4, 5, 6].map(() => {\n      let stopAt = now.unix();\n      let startAt = now.add(-1, 'days').unix();\n      promises.push(fetchDeposits(startAt, stopAt, history));\n    });\n    await Promise.all(promises).catch(console.error);\n\n    this.setState({ history });\n  }\n\n  render() {\n    let { history } = this.state;\n    let loadingComponent = <div className=\"chart\"><LoadingOutlined style={{fontSize: '28px', color: '#ccc'}} /></div>;\n    return (\n      <div>\n        <h1>Deposit History</h1>\n        {\n          history.length ? <LineChart data={history} /> : loadingComponent\n        }\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Service from '../../Service';\nimport { Row, Col, Button, Statistic, Table, Divider, Input, message } from 'antd';\nimport '../../style/index.css';\nimport moment from 'moment';\nimport { addressFormatter, txFormatter } from '../../utils/index';\nimport { ArrowUpOutlined, ArrowDownOutlined, LoadingOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport Utils from '../../utils';\nimport LineChart from '../../components/Chart/Line';\nimport { gql, useQuery } from '@apollo/client';\nimport LatestRedeem from './latest_redeem';\nimport LatestDeposit from './latest_deposit';\nimport HistoryDeposit from './history_deposit';\nimport HistoryRedeem from './history_redeem';\n\nconst { Search } = Input;\nconst wallet = '0xf6f372dfaecc1431186598c304e91b79ce115766';\nconst fromBlock = 10959084;\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalSupply: 0,\n      totalMinted: 0,\n      currentSupply: 0,\n      totalMintedUserCount: 0,\n\n      depositHistory: [],\n      redeemHistory: []\n    }\n\n    this.getTbtcData = this.getTbtcData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.getTbtcData();\n  }\n\n  async getTbtcData() {\n    let result = {};\n    await Promise.all([\n      (async () => result.totalSupply = await Service.tbtc.maxSupply())(),\n      (async () => result.currentSupply = await Service.tbtc.currentSupply())(),\n      (async () => result.totalMinted = await Service.tbtc.totalMinted())(),\n      (async () => result.totalMintedUserCount = await Service.tbtc.mintUserCount())(),\n    ]);\n\n    console.log(result)\n\n    this.setState(result);\n  }\n\n  handleSearch = (addr) => {\n    if(!Utils.web3.utils.isAddress(addr)) {\n      message.error('Invalid address!');\n    } else {\n      window.location.href = `/user/${addr}`;\n    }\n  }\n\n  render() {\n    let {\n      currentSupply,\n      totalSupply,\n      totalMinted,\n      totalMintedUserCount,\n    } = this.state;\n\n    let loadingComponent = <div className=\"chart\"><LoadingOutlined style={{fontSize: '28px', color: '#ccc'}} /></div>;\n\n    return (\n      <div>\n        <section className=\"home__search\">\n          <h1><b>tBTC</b> Explorer</h1>\n          <div className=\"search\">\n            <Search placeholder=\"Search for an address, a transaction\" size=\"large\" onSearch={this.handleSearch} enterButton />\n          </div>\n\n          <p>\n            <b>tBTC</b>The safe way to earn with your Bitcoin.\n            <Button type=\"link\" href=\"https://dapp.tbtc.network/\" target=\"_blank\">Mint your first tBTC?</Button>\n          </p>\n        </section>\n\n        <section className=\"assets\">\n          <div span=\"4\" className=\"assets__box\">\n            <Statistic title=\"Current Supply\" prefix={!currentSupply ? <LoadingOutlined /> : <ArrowUpOutlined />} value={currentSupply / 1e18} precision={5} />\n          </div>\n\n          <div className=\"assets__box\">\n            <Statistic title=\"Total Supply\" prefix={!totalSupply && <LoadingOutlined />} value={totalSupply / 1e18} precision={5} />\n          </div>\n\n          <div span=\"4\" className=\"assets__box\">\n            <Statistic title=\"Total Minted\" prefix={!totalMinted && <LoadingOutlined />} value={totalMinted / 1e18} precision={5} />\n          </div>\n\n          <div span=\"4\" className=\"assets__box\">\n            <Statistic title=\"Total Minted User\" prefix={!totalMintedUserCount && <LoadingOutlined />} value={totalMintedUserCount} precision={0} />\n          </div>\n\n          <div span=\"4\" className=\"banner\">\n            <span>1 tBTC = 1 BTC</span>\n          </div>\n        </section>\n\n        <Row type=\"flex\" justify=\"space-around\">\n          <Col lg={11} xs={24} className=\"list\">\n            <HistoryDeposit />\n          </Col>\n          <Col lg={11} xs={24} className=\"list\">\n            <HistoryRedeem />\n          </Col>\n          <Col lg={11} xs={24} className=\"list\">\n            <LatestDeposit />\n          </Col>\n\n          <Col lg={11} xs={24} className=\"list\">\n            <LatestRedeem />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Service from '../Service';\nimport { Button, Select, Table, Tag } from 'antd';\nimport { Link } from 'react-router-dom';\nimport '../style/index.css';\nimport moment from 'moment';\nimport Utils from '../utils';\nimport { addressFormatter, txFormatter } from '../utils/index';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { gql } from '@apollo/client';\n\nconst { Option } = Select;\nclass Deposit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      pageSize: 200,\n      deposits: []\n    }\n  }\n\n  async componentDidMount() {\n    this.getDataWithManager();\n  }\n\n  getDataWithManager = async () => {\n    let { page, pageSize } = this.state;\n    if(page < 0) return;\n    try {\n      let data = await this.getData(page, pageSize);\n      if(!!data && data.length > 0) {\n        let deposits = this.state.deposits.concat(data);\n        this.setState({ deposits, page: page + 1 });\n      } else {\n        this.setState({ page: -1 }); // stop fetch\n      }\n    } catch(e) {\n      console.error(e)\n    }\n  }\n\n  getData = (page, pageSize) => {\n    return new Promise((resolve, reject) => {\n      let self = this;\n      let skip = page * pageSize;\n      Utils.apolloClient.query({\n        query: DEPOSITS_QUERY,\n        variables: { first: pageSize, skip: skip }\n      })\n      .then(res => {\n        if(res.loading) return;\n        let deposits = res.data && res.data.deposits || [];\n        resolve(deposits)\n      });\n    })\n  }\n\n  onChange = async (newPage, newPageSize) => {\n    let { page, pageSize } = this.state;\n    if(newPage * newPageSize >= page * pageSize / 2) {\n      this.getDataWithManager();\n    }\n  }\n\n  render() {\n    let { deposits } = this.state;\n    return (\n      <div className=\"explorer\">\n        {\n          /*\n          <div className=\"explorer__search\">\n            <Select className=\"explorer__search_select\">\n              <Option>filter addr</Option>\n            </Select>\n            &nbsp;\n            &nbsp;\n            &nbsp;\n            <Select className=\"explorer__search_select\">\n              <Option>filter status</Option>\n            </Select>\n          </div>\n          */\n        }\n\n        <h1>Deposit List</h1>\n\n        <Table\n          size=\"small\"\n          bordered\n          loading={!deposits || !deposits.length}\n          columns={[\n            {\n              title: 'Time',\n              render(deposit) {\n                return moment(+deposit.createdAt * 1000).fromNow();\n              }\n            },\n            {\n              title: 'Creator',\n              render(deposit) {\n                return <Link to={`/user/${deposit.tdtToken.owner}`}>\n                  { addressFormatter(deposit.tdtToken.owner, false) }\n                </Link>\n              }\n            },\n            {\n              title: 'Contract',\n              render(deposit) {\n                return <Link to={`/detail/${deposit.contractAddress}`}>\n                  { addressFormatter(deposit.contractAddress, false) }\n                </Link>\n              }\n            },\n            {\n              title: 'Lot Size',\n              align: 'right',\n              render(deposit) {\n                return <div>{ deposit.lotSizeSatoshis / 1e8 } <i>BTC</i></div>;\n              },\n              sorter: (a, b) => {\n                let aValue = a.lotSizeSatoshis / 1e8;\n                let bValue = b.lotSizeSatoshis / 1e8;\n                return aValue - bValue;\n              }\n            },\n            {\n              title: 'State',\n              align: 'right',\n              render(deposit) {\n                let color = '#87d068';\n                if (deposit.currentState.indexOf('FAILED') >= 0) {\n                  color = '#f50';\n                } else if (deposit.currentState === 'ACTIVE') {\n                  color  = '#87d068';\n                } else {\n                  color = 'orange';\n                }\n\n                return <Tag color={color}>{ deposit.currentState }</Tag>;\n              }\n            },\n          ]}\n          rowKey={item => item.id}\n          dataSource={deposits}\n          pagination={{\n            pageSize: 15,\n            pageSizeOptions: [15, 50, 100],\n            onChange: this.onChange,\n          }}\n        />\n\n        {\n          /*\n          <table>\n            <thead>\n              <tr>\n                <th>time</th>\n                <th>creator</th>\n                <th>contract</th>\n                <th>lotSize</th>\n                <th>state</th>\n              </tr>\n            </thead>\n            <tbody>\n            {depositEventList && depositEventList.map(deposit => (\n              <tr key={deposit.returnValues._depositContractAddress}>\n                <td>{deposit.returnValues._timestamp}</td>\n                <td>creator_todo_add</td>\n                <td>{deposit.returnValues._depositContractAddress}</td>\n                <td>{lotSize[deposit.returnValues._depositContractAddress]}</td>\n                <td>{state[deposit.returnValues._depositContractAddress]}</td>\n              </tr>\n            ))}\n            </tbody>\n          </table>\n          */\n        }\n      </div>\n    );\n  }\n}\n\nconst DEPOSITS_QUERY = gql`\n  query Deposit($first: Int!, $skip: Int!) {\n    deposits(\n      orderBy: createdAt,\n      orderDirection: desc,\n      first: $first,\n      skip: $skip\n    ) {\n      id,\n      contractAddress,\n      lotSizeSatoshis,\n      currentState,\n      keepAddress,\n      updatedAt,\n      createdAt,\n      redemptionStartedAt,\n      currentStateTimesOutAt\n      tdtToken {\n        owner\n      }\n    }\n  }\n`;\n\nexport default Deposit;\n","import React from 'react';\nimport { Table, Button, Tag } from 'antd';\nimport { Link } from 'react-router-dom';\nimport Utils from '../utils';\nimport Service from '../Service';\nimport moment from 'moment';\nimport { addressFormatter, txFormatter } from '../utils/index';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { gql } from '@apollo/client';\n\nconst fromBlock = '10700000';\n\nclass RedemptionList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      pageSize: 200,\n      redeems: []\n    }\n  }\n\n  async componentDidMount() {\n    this.getDataWithManager();\n  }\n\n  getDataWithManager = async () => {\n    let { page, pageSize } = this.state;\n    if(page < 0) return;\n    try {\n      let data = await this.getData(page, pageSize);\n      if(!!data && data.length > 0) {\n        let redeems = this.state.redeems.concat(data);\n        console.log('redeems: ', redeems)\n        this.setState({ redeems, page: page + 1 });\n      } else {\n        this.setState({ page: -1 }); // stop fetch\n      }\n    } catch(e) {\n      console.error(e)\n    }\n  }\n\n  getData = (page, pageSize) => {\n    return new Promise((resolve, reject) => {\n      let self = this;\n      let skip = page * pageSize;\n      Utils.apolloClient.query({\n        query: DEPOSITS_QUERY,\n        variables: { first: pageSize, skip: skip }\n      })\n      .then(res => {\n        if(res.loading) return;\n        let deposits = res.data && res.data.deposits || [];\n        resolve(deposits)\n      });\n    })\n  }\n\n  onChange = async (newPage, newPageSize) => {\n    let { page, pageSize } = this.state;\n    if(newPage * newPageSize >= page * pageSize / 2) {\n      this.getDataWithManager();\n    }\n  }\n\n  render() {\n    let { redeems } = this.state;\n    return (\n      <div>\n        <div className=\"explorer\">\n          <h1>Redemption List</h1>\n\n          <Table\n            size=\"small\"\n            bordered\n            loading={!redeems.length}\n            columns={[\n              {\n                title: 'Time',\n                render(item) {\n                  return <span className=\"wallet\">{ moment(+item.redemptionStartedAt * 1000).fromNow() }</span>;\n                }\n              },\n              {\n                title: 'Requester',\n                render(item) {\n                  return <Link to={`/user/${item.tdtToken.owner}`}>\n                    { addressFormatter(item.tdtToken.owner, false) }\n                  </Link>\n                }\n              },\n              {\n                title: 'Contract',\n                render(item) {\n                  return <Link to={`/detail/${item.contractAddress}`}>\n                    { addressFormatter(item.contractAddress, false) }\n                  </Link>\n                }\n              },\n              {\n                title: 'LotSize',\n                align: 'right',\n                render(item) {\n                  return <div>{ item.lotSizeSatoshis / 1e8 } <i>BTC</i></div>\n                }\n              },\n//              {\n//                title: 'Request Fee',\n//                align: 'right',\n//                render(redemption) {\n//                  return <div>{ redemption.returnValues._requestedFee / 1e8 } <i>BTC</i></div>\n//                }\n//              },\n              {\n              title: 'State',\n                align: 'right',\n                render(item) {\n                  let color = '#87d068';\n                  if (item.currentState.indexOf('FAILED') >= 0) {\n                    color = '#f50';\n                  } else if (item.currentState === 'REDEEMED') {\n                    color  = '#87d068';\n                  } else {\n                    color = 'orange';\n                  }\n\n                  return <Tag color={color}>{ item.currentState }</Tag>;\n                }\n              },\n            ]}\n            rowKey={item => item.id}\n            dataSource={redeems}\n            pagination={{\n              pageSize: 15,\n              onChange: this.onChange,\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst DEPOSITS_QUERY = gql`\n  query Deposit($first: Int!, $skip: Int!) {\n    deposits(\n      orderBy: redemptionStartedAt,\n      orderDirection: desc,\n      where: { redemptionStartedAt_not: null },\n      first: $first,\n      skip: $skip\n    ) {\n      id,\n      contractAddress,\n      lotSizeSatoshis,\n      currentState,\n      keepAddress,\n      updatedAt,\n      createdAt,\n      redemptionStartedAt,\n      currentStateTimesOutAt\n      tdtToken {\n        owner\n      }\n    }\n  }\n`;\n\n\nexport default RedemptionList;\n","import React from 'react';\nimport Utils from '../utils';\nimport BigNumber from 'bignumber.js';\nimport Service from '../Service';\nimport { Row, Col, Card, Descriptions, Steps } from 'antd';\nimport moment from 'moment';\nimport { addressFormatter, txFormatter } from '../utils/index';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport '../style/index.css';\nimport { gql } from '@apollo/client';\n\nconst DEPOSITS_QUERY = gql`\n  query GetDeposit($id: ID!) {\n    deposit(id: $id) {\n      id,\n      contractAddress,\n      currentState,\n      createdAt,\n      keepAddress,\n      lotSizeSatoshis,\n      endOfTerm,\n      index,\n\n      currentStateTimesOutAt,\n\n      tdtToken {\n          id,\n          tokenID,\n          owner,\n          minter\n      }\n\n      initialCollateralizedPercent,\n      undercollateralizedThresholdPercent,\n      severelyUndercollateralizedThresholdPercent,\n\n      bondedECDSAKeep {\n        id,\n        keepAddress,\n        totalBondAmount,\n        publicKey,\n        status,\n        honestThreshold,\n        members {\n          id,\n          address\n        }\n      },\n\n      depositLiquidation {\n        cause\n      }\n    }\n  }\n`;\n\nconst LOG_QUERY = gql`\n  query GetDepositLogs($depositId: String!)\n  {\n    events(where: {deposit: $depositId}, orderBy: timestamp, orderDirection: desc) {\n      __typename,\n      id,\n      transactionHash,\n      submitter,\n      timestamp,\n\n      ...on RegisteredPubKeyEvent {\n        signingGroupPubkeyX,\n        signingGroupPubkeyY\n      }\n\n      ...on StartedLiquidationEvent {\n        cause\n      },\n\n      ...on SetupFailedEvent {\n        reason,\n        deposit {\n          bondedECDSAKeep {\n            pubkeySubmissions { address },\n            members { address }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst { Step } = Steps;\n\nclass Detail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deposit: {},\n      mintLogs: {},\n      redeemLogs: {},\n    }\n  }\n\n  async componentDidMount() {\n    let deposit = await this.fetchDeposit();\n    let mintLogs = {};\n    let redeemLogs = {};\n    let logs = (await this.fetchLogs()).data.events || [];\n    logs.map(log => {\n      if(['CreatedEvent', 'RegisteredPubKeyEvent', 'FundedEvent'].indexOf(log.__typename) != -1) {\n        mintLogs[log.__typename] = log;\n      } else {\n        redeemLogs[log.__typename] = log;\n      }\n    });\n    this.setState({ deposit, mintLogs, redeemLogs });\n\n    return;\n  }\n\n  fetchDeposit = () => {\n    let contractAddr = this.props.match.params.id;\n    return new Promise((resolve, reject) => {\n      Utils.apolloClient.query({\n        query: DEPOSITS_QUERY,\n        variables: { id: `dp-${contractAddr}` }\n      })\n      .then(res => {\n        if(res.loading) return;\n        let deposit = res.data && res.data.deposit || {};\n        resolve(deposit);\n      })\n      .catch(e => reject(e));\n    });\n  }\n\n  fetchLogs = () => {\n    let contractAddr = this.props.match.params.id;\n    return new Promise((resolve, reject) => {\n      Utils.apolloClient.query({\n        query: LOG_QUERY,\n        variables: { depositId: `dp-${contractAddr}` }\n      })\n      .then(res => {\n        if(res.loading) return;\n        resolve(res);\n      })\n      .catch(e => reject(e));\n    });\n  }\n\n  render() {\n    let { deposit, mintLogs, redeemLogs } = this.state;\n\n    let mintState = 'PROCESSING';\n    if(!!mintLogs.CreatedEvent) {\n      mintState = 'COMPLETED';\n    }\n\n    let redeemState = 'NOT_START';\n    if(!!redeemLogs.RedemptionRequestedEvent) {\n      redeemState = 'PROCESSING';\n    } else if(!!redeemLogs.RedeemedEvent) {\n      redeemState = 'COMPLETED';\n    }\n\n    return (\n      <div>\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span=\"11\" className=\"list\">\n            <h3>Mint Status: {mintState}</h3>\n\n            <Steps current={Utils.calMintStep(mintLogs)} direction=\"vertical\">\n              <Step\n                title=\"Created\"\n                subTitle={mintLogs.CreatedEvent && moment(mintLogs.CreatedEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Create deposit contract for minting <i><b>tBTC</b></i></div>\n                    {mintLogs.CreatedEvent && <div>{addressFormatter(mintLogs.CreatedEvent.submitter)} in {txFormatter(mintLogs.CreatedEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n              <Step\n                title=\"RegisterdPubKey\"\n                subTitle={mintLogs.RegisteredPubKeyEvent && moment(mintLogs.RegisteredPubKeyEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Register the public key of signer group</div>\n                    {mintLogs.RegisteredPubKeyEvent && <div>{addressFormatter(mintLogs.RegisteredPubKeyEvent.submitter)} in {txFormatter(mintLogs.RegisteredPubKeyEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n              <Step\n                title=\"Funded\"\n                subTitle={mintLogs.FundedEvent && moment(mintLogs.FundedEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Fund <i><b>BTC</b></i> into signer group</div>\n                    {mintLogs.FundedEvent && <div>{addressFormatter(mintLogs.FundedEvent.submitter)} in {txFormatter(mintLogs.FundedEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n            </Steps>\n          </Col>\n\n          <Col span=\"12\" className=\"list\">\n            <h3>Redeem Status: {redeemState}</h3>\n\n            <Steps current={Utils.calRedeemStep(redeemLogs)} direction=\"vertical\">\n              <Step\n                title=\"Created\"\n                subTitle={redeemLogs.RedemptionRequestedEvent && moment(redeemLogs.RedemptionRequestedEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Request from redeeming <i><b>BTC</b></i></div>\n                    {redeemLogs.RedemptionRequestedEvent && <div>{addressFormatter(redeemLogs.RedemptionRequestedEvent.submitter)} in {txFormatter(redeemLogs.RedemptionRequestedEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n              <Step\n                title=\"GotRedemptionSignature\"\n                subTitle={redeemLogs.GotRedemptionSignatureEvent && moment(redeemLogs.GotRedemptionSignatureEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Got the redemption signature of signer group</div>\n                    {redeemLogs.GotRedemptionSignatureEvent && <div>{addressFormatter(redeemLogs.GotRedemptionSignatureEvent.submitter)} in {txFormatter(redeemLogs.GotRedemptionSignatureEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n              <Step\n                title=\"Redeemed\"\n                subTitle={redeemLogs.RedeemedEvent && moment(redeemLogs.RedeemedEvent.timestamp * 1000).fromNow()}\n                description={\n                  <>\n                    <div>Redeem <i><b>BTC</b></i> successed</div>\n                    {redeemLogs.RedeemedEvent && <div>{addressFormatter(redeemLogs.RedeemedEvent)} in {txFormatter(redeemLogs.RedeemedEvent.transactionHash)}</div>}\n                  </>\n                }\n              />\n            </Steps>\n          </Col>\n        </Row>\n\n        <div className=\"info\" style={{minHeight: '400px'}}>\n          <Descriptions title=\"Deposit&Reedem Base Info\" bordered size=\"small\">\n            <Descriptions.Item span={3} label=\"DepositContract\">{deposit.contractAddress}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"TokenId\">{deposit.contractAddress}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"EndOfTerm\">{deposit.endOfTerm && moment(+deposit.endOfTerm * 1000).fromNow()}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Owner\">{deposit.tdtToken && <Link to={`/user/ownership`}>{deposit.tdtToken.owner}</Link> || <LoadingOutlined />}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Creator\">{deposit.tdtToken && <Link to={`/user/ownership`}>{deposit.tdtToken.minter}</Link> || <LoadingOutlined />}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Lot Size\">{deposit.lotSizeSatoshis / 1e8} BTC</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Status\">{deposit.currentState}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Time\">{moment(+deposit.createdAt * 1000).fromNow()}</Descriptions.Item>\n          </Descriptions>\n        </div>\n\n        <div className=\"info\">\n          <Descriptions title=\"Keep\" bordered size=\"small\">\n            <Descriptions.Item span={3} label=\"KeepContract\">{deposit.keepAddress}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Signers\">{deposit.bondedECDSAKeep && deposit.bondedECDSAKeep.members && deposit.bondedECDSAKeep.members.map(member => <span style={{marginRight: '15px'}}>{addressFormatter(member.address, true)}</span>)}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Bond\">{deposit.bondedECDSAKeep && deposit.bondedECDSAKeep.totalBondAmount / 1e18} ETH</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Collaterialization\">{deposit.initialCollateralizedPercent}%</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Thresholds\">\n              {`${deposit.initialCollateralizedPercent}% / ${deposit.undercollateralizedThresholdPercent}% / ${deposit.severelyUndercollateralizedThresholdPercent}%`}\n            </Descriptions.Item>\n            <Descriptions.Item span={3} label=\"HonestThreshold\">{deposit.bondedECDSAKeep && deposit.bondedECDSAKeep.honestThreshold}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"BTC PublicKey\">{deposit.bondedECDSAKeep && deposit.bondedECDSAKeep.publicKey}</Descriptions.Item>\n            <Descriptions.Item span={3} label=\"Status\">{deposit.bondedECDSAKeep && deposit.bondedECDSAKeep.status}</Descriptions.Item>\n          </Descriptions>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Detail;\n","import React from 'react';\nimport Service from '../Service';\nimport { Row, Col, Button, Statistic, Table, Divider, Input } from 'antd';\nimport '../style/index.css';\nimport moment from 'moment';\nimport { addressFormatter, txFormatter } from '../utils/index';\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport Utils from '../utils';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst { Search } = Input;\nconst fromBlock = 10959084;\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tbtcBalance: null,\n      tdtBalance: null,\n      frtBalance: null,\n\n      depositList: null,\n      redeemList: null,\n\n      mintLotSize: {},\n      redeemLotSize: {},\n    }\n  }\n\n  async componentDidMount() {\n    const wallet = this.props.match.params.id;\n\n    this.getTbtcBalance(wallet);\n    this.getTdtBalance(wallet);\n    this.getFrtBalance(wallet);\n    this.getDepositList(wallet);\n    this.getRedeemList(wallet);\n\n    // try {\n    //   let theHeight = window.innerHeight;\n    //   document.getElementById('box').style.height = `${theHeight}px`;\n    // } catch(e) {\n    //   console.log(e);\n    // }\n  }\n\n  getTbtcBalance = async (wallet) => {\n    let tbtcBalance = await Service.tbtc.balance(wallet);\n    this.setState({ tbtcBalance });\n  }\n\n  getTdtBalance = async (wallet) => {\n    //TODO fetch wallet from url\n    let tdtBalance = await Service.tdt.balance(wallet);\n    this.setState({ tdtBalance });\n  }\n\n  getFrtBalance = async (wallet) => {\n    let frtBalance = await Service.frt.balance(wallet);\n    this.setState({ frtBalance });\n  }\n\n  getDepositList = async (wallet) => {\n    let depositList = (await Service.deposit.getByWallet(wallet)).reverse();\n    this.setState({ depositList });\n\n    let addrList = [];\n    depositList.map(deposit => addrList.push(deposit.returnValues._depositContractAddress));\n    this.getMintLotSize(addrList);\n  }\n\n  getRedeemList = async (wallet) => {\n    let redeemList = (await Service.redeem.getByWallet(wallet)).reverse();\n    this.setState({ redeemList });\n\n    let addrList = [];\n    redeemList.map(redeem => addrList.push(redeem.returnValues._depositContractAddress));\n    this.getRedeemLotSize(addrList);\n  }\n\n  getMintLotSize = async addrList => {\n    let mintLotSize = await Service.deposit.getLotSizeTbtc(addrList);\n    this.setState({ mintLotSize });\n  }\n\n  getRedeemLotSize = async addrList => {\n    let redeemLotSize = await Service.deposit.getLotSizeTbtc(addrList);\n    this.setState({ redeemLotSize });\n  }\n\n  render() {\n    let { tbtcBalance, tdtBalance, frtBalance, depositList, redeemList, mintLotSize, redeemLotSize } = this.state;\n\n    return (\n      <div>\n        <section className=\"assets__user\">\n          <div span=\"5\" className=\"assets__user_box\">\n            <Statistic title=\"TBTC Balance\" prefix={!tbtcBalance && <LoadingOutlined />} value={tbtcBalance / 1e18} precision={5} />\n          </div>\n\n          <div span=\"5\" className=\"assets__user_box\">\n            <Statistic title=\"TDT Count\" prefix={!tdtBalance && <LoadingOutlined />} value={tdtBalance || 0} precision={0} />\n          </div>\n\n          <div span=\"5\" className=\"assets__user_box\">\n            <Statistic title=\"FRT Count\" prefix={!frtBalance && <LoadingOutlined />} value={frtBalance || 0} precision={0} />\n          </div>\n        </section>\n\n        <Divider />\n\n        <Row type=\"flex\" justify=\"space-around\">\n          <Col span=\"11\" className=\"list\">\n            <h1>Deposit List</h1>\n            <Table\n              size=\"small\"\n              pagination={false}\n              loading={depositList === null}\n              rowKey={item => item.returnValues['_timestamp']}\n              columns={[\n                {\n                  title: 'Time',\n                  render(item) {\n                    return moment(+item.returnValues['_timestamp'] * 1000).fromNow();\n                  }\n                },\n                {\n                  title: 'Contract Address',\n                  render(item) {\n                    return <Link to={`/detail/${item.returnValues['_depositContractAddress']}`}>\n                      { addressFormatter(item.returnValues['_depositContractAddress'], false) }\n                    </Link>;\n                  }\n                },\n                {\n                  title: 'Lot Size',\n                  align: 'right',\n                  render(item) {\n                    return mintLotSize[item.returnValues._depositContractAddress] ?\n                      <div>{ mintLotSize[item.returnValues._depositContractAddress] / 1e18 } <i>BTC</i></div> :\n                      <LoadingOutlined />\n                    ;\n                  }\n                },\n              ]}\n              dataSource={depositList || []}\n            />\n          </Col>\n\n          <Col span=\"11\" className=\"list\">\n            <h1>Redeem List</h1>\n            <Table\n              size=\"small\"\n              loading={redeemList === null}\n              pagination={false}\n              rowKey={item => item.transactionIndex}\n              columns={[\n                {\n                  title: 'Time',\n                  render(item) {\n                    return moment(Utils.time.blockToTimestamp(item.blockNumber) * 1000).fromNow();\n                  }\n                },\n                {\n                  title: 'Contract address',\n                  render(item) {\n                    return <Link to={`/detail/${item.returnValues['_depositContractAddress']}`}>\n                      { addressFormatter(item.returnValues['_depositContractAddress'], false) }\n                    </Link>;\n                  }\n                },\n                {\n                  title: 'Lot Size',\n                  align: 'right',\n                  render(item) {\n                    return redeemLotSize[item.returnValues._depositContractAddress] ?\n                      <div>{ redeemLotSize[item.returnValues._depositContractAddress] / 1e18 } <i>BTC</i></div> :\n                      <LoadingOutlined />\n                    ;\n                  }\n                },\n              ]}\n              dataSource={redeemList || []}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default User;\n","import React from 'react';\nimport Utils from '../utils';\nimport { Table, Radio } from 'antd';\nimport Service from '../Service';\nimport { Divider } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { gql } from '@apollo/client';\n\nconst DepositJSON = require(\"@keep-network/tbtc/artifacts/Deposit.json\");\n\nconst fromBlock = '0';\n\nclass AvailableTokenIdList extends React.Component {\n  constructor(props) {\n    super(props);\n    // tokenEntryEventList = tokenUsedList + tokenAvailableList\n    this.state = {\n      page: 0,\n      pageSize: 200,\n      deposits: []\n    }\n  }\n\n  async componentDidMount() {\n    this.getDataWithManager();\n  }\n\n  getDataWithManager = async () => {\n    let { page, pageSize } = this.state;\n    if(page < 0) return;\n    try {\n      let data = await this.getData(page, pageSize);\n      if(!!data && data.length > 0) {\n        let deposits = this.state.deposits.concat(data);\n        this.setState({ deposits, page: page + 1 });\n      } else {\n        this.setState({ page: -1 }); // stop fetch\n      }\n    } catch(e) {\n      console.error(e)\n    }\n  }\n\n  getData = (page, pageSize) => {\n    return new Promise((resolve, reject) => {\n      let self = this;\n      let skip = page * pageSize;\n      Utils.apolloClient.query({\n        query: DEPOSITS_QUERY,\n        variables: { first: pageSize, skip: skip }\n      })\n      .then(res => {\n        if(res.loading) return;\n        let deposits = res.data && res.data.deposits || [];\n        console.log('tbt: ', deposits)\n        resolve(deposits)\n      })\n      .catch(e => reject(e));\n    })\n  }\n\n  onChange = async (newPage, newPageSize) => {\n    let { page, pageSize } = this.state;\n    if(newPage * newPageSize >= page * pageSize / 2) {\n      this.getDataWithManager();\n    }\n  }\n\n  render() {\n    let { deposits } = this.state;\n    return (\n      <div>\n        <div className=\"info\">\n          <h3>What is TDT?</h3>\n          <div>The tBTC Deposit Token, commonly referenced as the TDT, is an ERC721 non-fungible token whose ownership reflects the ownership of its corresponding deposit. Each deposit has one TDT, and vice versa. Owning a TDT is equivalent to owning its corresponding deposit. TDTs can be transferred freely. tBTC's VendingMachine contract takes ownership of TDTs and in exchange returns fungible TBTC tokens whose value is backed 1-to-1 by the corresponding deposit's BTC.</div>\n          <br />\n          <div>In short, you will need it when you need to redeem BTC</div>\n        </div>\n\n        <Divider />\n\n        <div className=\"explorer\">\n          <h3>Available TDT(For Redeem BTC)</h3>\n          <br/>\n\n          <Table\n            loading={!deposits.length}\n            dataSource={deposits}\n            rowKey={item => item.id}\n            size=\"small\"\n            pagination={{\n              pageSize: 15,\n              onChange: this.onChange,\n            }}\n            columns={[\n              {\n                title: 'ID',\n                render(item) {\n                  return <div>{ item.contractAddress }</div>;\n                }\n              },\n              {\n                title: 'Lot Size',\n                align: 'right',\n                render(item) {\n                  return <div>{ item.lotSizeSatoshis / 1e8 } <i>BTC</i></div>\n                },\n                sorter: (a, b) => {\n                  let aValue = a.lotSizeSatoshis / 1e8;\n                  let bValue = b.lotSizeSatoshis / 1e8;\n                  return aValue - bValue;\n                }\n              }\n            ]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst DEPOSITS_QUERY = gql`\n  query Deposit($first: Int!, $skip: Int!) {\n    deposits(\n      orderBy: createdAt,\n      orderDirection: desc,\n      where: { currentState: \"ACTIVE\" },\n      first: $first,\n      skip: $skip\n    ) {\n      id,\n      contractAddress,\n      lotSizeSatoshis,\n      currentState,\n      keepAddress,\n      updatedAt,\n      createdAt,\n      redemptionStartedAt,\n      currentStateTimesOutAt\n      tdtToken {\n        owner\n      }\n    }\n  }\n`;\n\n\nexport default AvailableTokenIdList;\n","import React from 'react';\nimport Service from '../Service';\nimport numeral from 'numeral';\n\nclass LiquidityPool extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sushiTbtcWbtc: {},\n      uniTbtcWeth: {},\n      uniTbtcWbtc: {},\n      balancerTbtcWbtc: [],\n      balancerTbtcWeth: [],\n      curveReserve: [],\n      uniWethUSDT: {},\n    }\n  }\n\n  async componentDidMount() {\n    this.getCurveBalance();\n    this.getSushiTbtcWbtc();\n    this.getUniTbtcWeth();\n    this.getUniTbtcWbtc();\n    this.getBalancerTbtcWbtc();\n    this.getBalancerTbtcWeth();\n    this.getUniWethUSDT();\n  }\n\n  getUniWethUSDT = async () => {\n    this.setState({ uniWethUSDT: await Service.uniswap.getReservesOfWethUSDT() });\n  }\n\n  getSushiTbtcWbtc = async () => {\n    this.setState({ sushiTbtcWbtc: await Service.sushi.getReserves() });\n  }\n\n  getUniTbtcWeth = async () => {\n    this.setState({ uniTbtcWeth: await Service.uniswap.getReservesOfTbtcWeth() });\n  }\n\n  getUniTbtcWbtc = async () => {\n    this.setState({ uniTbtcWbtc: await Service.uniswap.getReservesOfTbtcWbtc() });\n  }\n\n  getBalancerTbtcWbtc = async () => {\n    this.setState({ balancerTbtcWbtc: await Service.balancer.getReservesOfTbtcWbtc() });\n  }\n\n  getBalancerTbtcWeth = async () => {\n    this.setState({ balancerTbtcWeth: await Service.balancer.getReservesOfTbtcWeth() });\n  }\n\n  getCurveBalance = async () => {\n    this.setState({ curveReserve: await Service.curve.getReserves() });\n  }\n\n  render() {\n    let { sushiTbtcWbtc, uniTbtcWeth, uniTbtcWbtc, balancerTbtcWbtc, balancerTbtcWeth, curveReserve, uniWethUSDT } = this.state;\n    let numberToFixed = n => {\n      return parseFloat(n).toFixed(5);\n    };\n\n    let tbtcPrice = 0;\n    // get tBTC price\n    if (uniWethUSDT && uniWethUSDT.reserve0 && uniWethUSDT.reserve1 && uniTbtcWeth && uniTbtcWeth.reserve0 && uniTbtcWeth.reserve1) {\n      let ethPrice = (uniWethUSDT.reserve1 / 1e6) / (uniWethUSDT.reserve0 / 1e18);\n      let btcETHPrice = (uniTbtcWeth.reserve1 / uniTbtcWeth.reserve0);\n\n      tbtcPrice = btcETHPrice * ethPrice;\n    }\n\n    let tbtcSupplay = 0;\n\n    if (\n      curveReserve && curveReserve.length &&\n      balancerTbtcWbtc && balancerTbtcWbtc.length &&\n      balancerTbtcWeth && balancerTbtcWeth.length &&\n      sushiTbtcWbtc.reserve0\n    ) {\n      tbtcSupplay = (curveReserve[0].balance / 1e18\n        + sushiTbtcWbtc.reserve1 / 1e18\n        + uniTbtcWeth.reserve0 / 1e18\n        + uniTbtcWbtc.reserve1 / 1e18\n        + balancerTbtcWbtc[1].balance / 1e18\n        + balancerTbtcWeth[1].balance / 1e18\n      );\n    }\n\n    let formatDollar = dollar => {\n      if (!dollar) return 0;\n      return '$' + numeral(dollar).format('0,0.00');\n    }\n\n    return (\n      <div>\n        <section className=\"liquidity__overview\">\n          <div className=\"liquidity__box\">\n            <section>\n              <img src=\"/liquidity.svg\" />\n            </section>\n\n            <div>\n              <span>Total Liquidity (tBTC)</span>\n              <label>{ !tbtcSupplay ? '...' : numeral(tbtcSupplay).format('0,0.00000') }</label>\n            </div>\n          </div>\n\n          <div className=\"liquidity__box\">\n            <section>\n              <img src=\"/dollar.svg\" />\n            </section>\n\n            <div>\n              <span>Total Liquidity (USDT)</span>\n              <label>${ (!tbtcPrice || !tbtcSupplay) ? '...' : numeral(tbtcPrice * tbtcSupplay).format('0,0') }</label>\n            </div>\n          </div>\n\n          <div className=\"liquidity__box\">\n            <section className=\"tbtc\">\n              <img src=\"/tbtc.png\" />\n            </section>\n\n            <div>\n              <span>tBTC</span>\n              <label>${ !tbtcPrice ? '...' : numeral(tbtcPrice).format('0,0.00') }</label>\n            </div>\n          </div>\n        </section>\n\n        <h1 className=\"liquidity\">tBTC Liquidity Info in DeFi</h1>\n        <br/>\n\n        <div className=\"liquidity\">\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div className=\"blue\"><img src=\"/curv.png\" /></div>\n              <h2>\n                <a href=\"https://www.curve.fi/tbtc/deposit\" target=\"_blank\">Curve</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && curveReserve.length) ? formatDollar(tbtcPrice * 2 * curveReserve[1].balance / 1e18) : '...' }</i>\n              </h2>\n            </div>\n            {curveReserve.map(token => (\n              <div>\n                <div>\n                <label>{ token.balance ? numberToFixed(token.balance / Math.pow(10, token.decimals)) : '...' }</label>\n                {token.symbol === 'crvRenWSBTC' ? 'sBTC' : token.symbol}\n                </div>\n              </div>\n            ))}\n          </section>\n\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div>🍣</div>\n              <h2>\n                <a href=\"https://exchange.sushiswapclassic.org/#/add/0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\" target=\"_blank\">SushiSwap</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && sushiTbtcWbtc.reserve1) ? formatDollar(tbtcPrice * 2 * sushiTbtcWbtc.reserve1 / 1e18) : '...' }</i>\n              </h2>\n            </div>\n\n            <div><label>{ sushiTbtcWbtc.reserve1 ? numberToFixed(sushiTbtcWbtc.reserve1 / 1e18) : '...' }</label>{sushiTbtcWbtc.reserve1Symbol}</div>\n\n            <div><label>{ sushiTbtcWbtc.reserve0 ? numberToFixed(sushiTbtcWbtc.reserve0 / 1e8) : '...' }</label>{sushiTbtcWbtc.reserve0Symbol}</div>\n          </section>\n\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div><img src=\"/uniswap.jpeg\" /></div>\n              <h2>\n                <a href=\"https://info.uniswap.org/pair/0x854056Fd40C1B52037166285B2e54Fee774d33f6\" target=\"_blank\">Uniswap</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && uniTbtcWeth.reserve0) ? formatDollar(tbtcPrice * 2 * uniTbtcWeth.reserve0 / 1e18) : '...' }</i>\n              </h2>\n            </div>\n            <div><label>{ uniTbtcWeth.reserve1 ? numberToFixed(uniTbtcWeth.reserve1 / 1e18) : '...' }</label>{uniTbtcWeth.reserve1Symbol}</div>\n            <div><label>{ uniTbtcWeth.reserve0 ? numberToFixed(uniTbtcWeth.reserve0 / 1e18) : '...' }</label>{uniTbtcWeth.reserve0Symbol}</div>\n          </section>\n\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div><img src=\"/uniswap.jpeg\" /></div>\n              <h2>\n                <a href=\"https://info.uniswap.org/pair/0x8a1643D77621d171df97Df4fc86051F54F7EBA90\" target=\"_blank\">Uniswap</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && uniTbtcWbtc.reserve0) ? formatDollar(tbtcPrice * 2 * uniTbtcWbtc.reserve0 / 1e8) : '...' }</i>\n              </h2>\n            </div>\n\n            <div><label>{uniTbtcWbtc.reserve1 ? numberToFixed(uniTbtcWbtc.reserve1 / 1e18) : '...'}</label>{uniTbtcWbtc.reserve1Symbol}</div>\n            <div><label>{uniTbtcWbtc.reserve0 ? numberToFixed(uniTbtcWbtc.reserve0 / 1e8) : '...'}</label>{uniTbtcWbtc.reserve0Symbol}</div>\n          </section>\n\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div className=\"black\"><img src=\"/balancer.svg\" /></div>\n              <h2>\n                <a href=\"https://pools.balancer.exchange/#/pool/0x17996cbddd23c2a912de8477c37d43a1b79770b8/\" target=\"_blank\">Balancer</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && balancerTbtcWbtc.length) ? formatDollar(tbtcPrice * 2 * balancerTbtcWbtc[1].balance / 1e18) : '...' }</i>\n              </h2>\n            </div>\n            {balancerTbtcWbtc.map(token => (\n              <div>\n                <div><label>{ token.balance ? numberToFixed(token.balance / Math.pow(10, token.decimals)) : '...' }</label>{token.symbol}</div>\n              </div>\n            ))}\n          </section>\n\n          <section className=\"liquidity__box\">\n            <div className=\"title\">\n              <div className=\"black\"><img src=\"/balancer.svg\" /></div>\n              <h2>\n                <a href=\"https://pools.balancer.exchange/#/pool/0xb98db2fb641751462fd78c6db2a5c6edb50864d4/\" target=\"_blank\">Balancer</a>\n                <span>↗</span>\n                <i>{ (tbtcPrice && balancerTbtcWeth.length) ? formatDollar(tbtcPrice * 2 * balancerTbtcWeth[0].balance / 1e18) : '...' }</i>\n              </h2>\n            </div>\n            {balancerTbtcWeth.map(token => (\n              <div>\n                <div><label>{ token.balance ? numberToFixed(token.balance / Math.pow(10, token.decimals)) : '...' }</label>{token.symbol}</div>\n              </div>\n            ))}\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LiquidityPool;\n","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\n\nconst USER_QUERY = gql`\n  {\n    users(first: 1000) {\n      id,\n      address,\n      numDepositsCreated,\n      numDepositsRedeemed,\n      numDepositsUnfunded,\n      numOwnDepositsRedeemed\n    }\n  }\n`;\n\nexport default function ActionStatistics() {\n  const { loading, error, data } = useQuery(USER_QUERY);\n  if (error) {\n    console.error(error);\n    return <p>Error :(</p>\n  };\n  let users = data && data.users || [];\n\n  return <div>\n    <Table\n      size=\"small\"\n      pagination={true}\n      loading={loading}\n      rowKey={item => item.id}\n      rowClassName={(record, index) => {\n        return index % 2 === 0 ? 'row__white' : 'row__ccc';\n      }}\n      columns={[\n        {\n          title: 'User',\n          render(item) {\n            return (\n              <Link to={`/user/${item.address}`}>\n                { addressFormatter(item.address, false) }\n              </Link>\n            )\n          }\n        },\n        {\n          title: 'DepositCreated',\n          render(item) {\n            return <div>{item.numDepositsCreated}</div>;\n          }\n        },\n        {\n          title: 'DepositsUnfunded',\n          render(item) {\n            return <div>{item.numDepositsUnfunded}</div>;\n          }\n        },\n        {\n          title: 'OwnDepositsRedeemed',\n          render(item) {\n            return <div>{item.numOwnDepositsRedeemed}</div>;\n          }\n        },\n        {\n          title: 'DepositsRedeemed',\n          render(item) {\n            return <div>{item.numDepositsRedeemed}</div>;\n          }\n        },\n      ]}\n      dataSource={users}\n    />\n  </div>;\n}\n","import React from 'react';\nimport uuid from 'uuid/v4';\nimport { Chart } from '@antv/g2';\nimport { addressFormatter } from '../../utils/index';\n\nexport default class PieChart extends React.Component {\n  componentWillMount() {\n    this.uuid = uuid();\n  }\n\n  renderChart = data => {\n    let totalSupply = this.props.totalSupply;\n    let chartData = [];\n    if (data && data.length) {\n      chartData = data.splice(0, 20)\n    }\n\n    const chart = new Chart({\n      container: this.uuid,\n      autoFit: true,\n      height: 500,\n    });\n\n    chart.coordinate('theta', {\n      radius: 0.75,\n      innerRadius: 0.6,\n    });\n\n    chart.data(chartData);\n\n    chart.tooltip({\n      showTitle: false,\n      showMarkers: false,\n    });\n\n    chart\n      .annotation()\n      .text({\n        position: ['50%', '50%'],\n        content: 'Total Supply',\n        style: {\n          fontSize: 14,\n          fill: '#8c8c8c',\n          textAlign: 'center',\n        },\n        offsetY: -20,\n      })\n      .text({\n        position: ['50%', '50%'],\n        content: totalSupply,\n        style: {\n          fontSize: 20,\n          fill: '#8c8c8c',\n          textAlign: 'center',\n        },\n        offsetY: 20,\n      });\n\n    chart\n      .interval()\n      .position('balance')\n      .color('id')\n      .label('id*balance', {\n        layout: { type: 'pie-spider' },\n        labelHeight: 20,\n        content: (obj) => `${obj.id} (${obj.balance})`,\n        labelLine: {\n          style: {\n            lineWidth: 0.5,\n          },\n        },\n      })\n      .adjust('stack');\n\n    chart.interaction('element-active');\n\n    chart.render();\n  }\n\n  componentDidMount() {\n    this.renderChart(this.props.data);\n  }\n\n  render() {\n    return <div className=\"dashboard__chart\" id={this.uuid}></div>;\n  }\n}\n","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport LineChart from '../../components/Chart/Line';\nimport Utils from '../../utils';\nimport PieChart from '../../components/Chart/Pie';\n\nconst HOLDER_QUERY = gql`\n  {\n    tokenHolders (\n      orderBy: tokenBalanceRaw,\n      orderDirection: desc,\n      first: 100\n    ) {\n      id,\n      tokenBalanceRaw\n    }\n  }\n`;\n\nexport default function Holder() {\n  const { loading, error, data } = useQuery(HOLDER_QUERY, {\n    client: Utils.tbtcGraphClient\n  });\n  if (error) return <p>Error :(</p>;\n  let holders = data && data.tokenHolders || [];\n  let chartData = [];\n  let totalSupply = 0;\n\n  if (holders && holders.length) {\n    chartData = holders.map(item => {\n      totalSupply += parseFloat(item.tokenBalanceRaw / 1e18);\n      return {\n        ...item,\n        id: addressFormatter(item.id, false),\n        balance: +parseFloat(item.tokenBalanceRaw / 1e18).toFixed(2),\n      };\n    });\n  }\n\n  if (chartData && chartData.length) {\n    return <div className=\"dashboard__box\">\n      <PieChart data={chartData} totalSupply={totalSupply.toFixed(2)} />\n    </div>;\n  } else {\n    return <div className=\"dashboard__box\"></div>;\n  }\n}\n","import React from 'react';\nimport uuid from 'uuid/v4';\nimport { Chart } from '@antv/g2';\nimport { addressFormatter } from '../../utils/index';\n\nexport default class ColumnChart extends React.Component {\n  componentWillMount() {\n    this.uuid = uuid();\n  }\n\n  renderChart = data => {\n    if (!data.length) {\n      return;\n    }\n    const chart = new Chart({\n      container: this.uuid,\n      autoFit: true,\n      height: 400,\n    });\n\n    chart.data(data);\n    chart.scale({\n      minted: {\n        nice: true,\n        min: 0,\n      },\n      addr: {\n        formatter(value) {\n          return addressFormatter(value, false);\n        }\n      }\n    });\n    chart.tooltip({\n      showCrosshairs: true,\n      shared: true,\n    });\n\n    chart.interval().position('addr*minted').color('#6178EF');\n    chart.render();\n  }\n\n  componentDidMount() {\n    this.renderChart(this.props.data);\n  }\n\n  render() {\n    return <div className=\"dashboard__chart\" id={this.uuid}></div>;\n  }\n}\n","import React from 'react';\nimport moment from 'moment';\nimport { Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { addressFormatter } from '../../utils/index';\nimport { gql, useQuery } from '@apollo/client';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport LineChart from '../../components/Chart/Line';\nimport Utils from '../../utils';\nimport BigNumber from 'bignumber.js';\nimport ColumnChart from '../../components/Chart/Column';\n\nconst MINT_QUERY = gql`\n  query Mint($first: Int!, $skip: Int!) {\n    mints (\n      orderBy: timestamp,\n      orderDirection: desc,\n      first: $first,\n      skip: $skip\n    ) {\n      to,\n      amount\n    }\n  }\n`;\n\nclass Minter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minters: []\n    }\n  }\n\n  async componentDidMount() {\n    // get total mints\n    let mints = [],\n        page = 0,\n        pageSize = 800\n    ;\n    try {\n      while(true) {\n        let data = await this.getData(page, pageSize);\n        mints = mints.concat(data);\n        if(data && data.length >= pageSize) {\n          page++;\n          continue;\n        }\n        break;\n      }\n      console.log('mints: ', mints);\n    } catch(e) {\n      console.error(e)\n    }\n\n    // cal total count of minters\n    let totalAmount = {};\n    let minter_addrs = [];\n    mints.map(mint => {\n      if(!totalAmount[mint.to]) {\n        totalAmount[mint.to] = new BigNumber(0);\n        minter_addrs.push(mint.to);\n      }\n      let amount = new BigNumber(mint.amount);\n      totalAmount[mint.to] = totalAmount[mint.to].plus(amount);\n    });\n\n    let minters = [];\n    minter_addrs.map(addr => {\n      minters.push({addr, amount: totalAmount[addr]})\n    })\n    minters = minters.sort((a, b) => b.amount.comparedTo(a.amount));\n    this.setState({ minters })\n  }\n\n  getData = (page, pageSize) => {\n    return new Promise((resolve, reject) => {\n      let self = this;\n      let skip = page * pageSize;\n      Utils.tbtcGraphClient.query({\n        query: MINT_QUERY,\n        variables: { first: pageSize, skip: skip }\n      })\n      .then(res => {\n        if(res.loading) return;\n        let mints = res.data && res.data.mints || [];\n        resolve(mints)\n      })\n      .catch(e => reject(e));\n    })\n  }\n\n  render() {\n    let { minters } = this.state;\n    let chartData = minters.splice(0, 50);\n\n    if (chartData && chartData.length) {\n      chartData = chartData.map(item => {\n        return {\n          ...item,\n          minted: parseFloat(item.amount)\n        }\n      });\n\n      return <div className=\"dashboard__box\">\n        <ColumnChart data={chartData} />\n      </div>;\n    } else {\n      return <div className=\"dashboard__box\"></div>;\n    }\n  }\n}\n\nexport default Minter;\n","import React from 'react';\nimport Utils from '../../utils';\nimport ActionStatistic from './action_statistic';\nimport Holder from './holder';\nimport Minter from './minter';\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n        <h2>Total Minted User</h2>\n        <Minter />\n        <br/>\n        <br/>\n\n        <h2>tBTC Holders</h2>\n        <Holder />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Web3 from 'web3';\nimport Home from './page/home/';\nimport Deposit from './page/deposit';\nimport Redeem from './page/redeem';\nimport Detail from './page/detail';\nimport User from './page/user';\nimport TDT from './page/tdt';\nimport LiquidityPool from './page/liquidity';\nimport Dashboard from './page/dashboard/';\nimport styles from './style/index.css';\nimport Utils from './utils';\nimport 'antd/dist/antd.css';\nimport { message, Badge } from 'antd';\nimport { ApolloProvider } from '@apollo/client';\n// import { Router, Route, Link } from 'react-router'\n\nimport { Menu, Divider, Input, Popover, Tooltip } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\nmessage.config({\n  duration: 2,\n  maxCount: 1,\n});\n\nconst { Search } = Input;\nconst DepositFactoryJSON = require(\"@keep-network/tbtc/artifacts/DepositFactory.json\");\nconst TBTCSystemJSON = require(\"@keep-network/tbtc/artifacts/TBTCSystem.json\");\nconst TBTCTokenJson = require(\"@keep-network/tbtc/artifacts/TBTCToken.json\");\nconst TBTCDepositTokenJson = require(\"@keep-network/tbtc/artifacts/TBTCDepositToken.json\");\nconst VendingMachineJson = require(\"@keep-network/tbtc/artifacts/VendingMachine.json\");\n\nconst web3 = new Web3(\"https://mainnet.infura.io/v3/fae6a8d70b074a21898e735c568a80cf\");\nconst contracts = {\n  DepositFactoryContract: new web3.eth.Contract(DepositFactoryJSON.abi, \"0x87effef56c7ff13e2463b5d4dce81be2340faf8b\"),\n  TBTCSystemContract: new web3.eth.Contract(TBTCSystemJSON.abi, \"0xe20A5C79b39bC8C363f0f49ADcFa82C2a01ab64a\"),\n  TBTCTokenContract: new web3.eth.Contract(TBTCTokenJson.abi, \"0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa\"),\n  TBTCDepositTokenContract: new web3.eth.Contract(TBTCDepositTokenJson.abi, \"0x10B66Bd1e3b5a936B7f8Dbc5976004311037Cdf0\"),\n  VendingMachineContract: new web3.eth.Contract(VendingMachineJson.abi, \"0x526c08e5532a9308b3fb33b7968ef78a5005d2ac\"),\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { route: null }\n  }\n\n  handleSearch = (addr) => {\n    if(!Utils.web3.utils.isAddress(addr)) {\n      message.error('Invalid address!');\n    } else {\n      window.location.href = `/user/${addr}`;\n    }\n  }\n\n  render() {\n    let { route } = this.state;\n\n    return (\n      <Router>\n        <ApolloProvider client={Utils.apolloClient}>\n          <div id=\"box\" className=\"box\">\n            <div className=\"header\">\n              <section>\n              <Link to=\"/\" className=\"header__logo\">\n                <img src=\"/logo.svg\" />\n              </Link>\n\n              <div className=\"header__menu\">\n                <Link to=\"/\">\n                  Home\n                </Link>\n                <Link to=\"/dashboard\">\n                  Insight\n                </Link>\n                <Link to=\"/deposit\">\n                  Deposit\n                </Link>\n                <Link to=\"/redeem\">\n                  Redeem\n                </Link>\n                <Link to=\"/tdt\">\n                  TDT\n                </Link>\n                <Tooltip\n                  visible={true}\n                  placement=\"bottom\"\n                  title={(\n                    <div className='tooltip__content'>tBTC liquidity info in DeFi.</div>\n                  )}\n                >\n                  <Link to=\"/liquidity\">\n                    Liquidity\n                  </Link>\n                </Tooltip>\n              </div>\n              </section>\n              {\n                /*\n                <div className=\"search\">\n                  <Search placeholder=\"Input your wallet\" size=\"large\" onSearch={this.handleSearch} enterButton />\n                </div>\n                */\n              }\n            </div>\n\n            <div className=\"container\">\n              <div className=\"container__right\">\n                <section className=\"container__right_box\">\n                  <Switch>\n                    <Route exact path=\"/\">\n                      <Home />\n                    </Route>\n                    <Route path=\"/deposit\">\n                      <Deposit />\n                    </Route>\n                    <Route path=\"/redeem\">\n                      <Redeem />\n                    </Route>\n                    <Route path=\"/detail/:id\" component={Detail} />\n                    <Route path=\"/user/:id\" component={User} />\n                    <Route path=\"/tdt\">\n                      <TDT />\n                    </Route>\n                    <Route path=\"/liquidity\" component={LiquidityPool} />\n                    <Route path=\"/dashboard\" component={Dashboard} />\n                  </Switch>\n                </section>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"footer\">\n            <section>\n              <label>Copyright © 2020, tBTC-Explorer Team. All rights reserved.</label>\n\n              <a href=\"https://github.com/Mexplo/tbtc_explorer\" target=\"_blank\">GitHub</a>\n\n              <Popover\n                content={(\n                  <div className=\"donations\">\n                    <img src=\"/eth.png\" />\n                    <p>0x5180441e8c2caDa572841c26ab7eeD0726F1097D</p>\n                  </div>\n                )}\n              >\n                <span>Donations: 0x51....1097D</span>\n              </Popover>\n            </section>\n          </div>\n        </ApolloProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Route, Link } from 'react-router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}